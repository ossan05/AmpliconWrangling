# using FASTX

function generate_seq(seq_len::Int)
    dna = "ACGT"
    seq = ""

    for i in 1:seq_len
        seq *= rand(dna)
    end

    # mutations

    seq_copy1 = ""
    dein = seq_len
    while length(seq_copy1) + seq_len - dein < seq_len * 1.2
        dein = rand(1:seq_len)
        if rand(1:2) == 1
            if rand(1:100) == 21
                seq_copy1 *= seq[1:dein] * rand(dna)
            else
                seq_copy1 *= seq[1:dein] * rand(dna) * rand(dna) * rand(dna) 
            end
        else
            if rand(1:100) == 21
                seq_copy1 *= seq[1:dein] * rand(dna) 
            else
                seq_copy1 *= seq[1:dein] * rand(dna) * rand(dna) * rand(dna)
            end
        end
    end

    seq_copy1 *= seq[dein + 1:end]

    # sequencing errors

    seq_copy2 = collect(seq_copy1)
    for i in 1:length(seq_copy2)
        if rand(1:10) == 7
            seq_copy2[i] = dna[rand(findall(x->x != seq_copy2[i], dna))]
        end
    end

    return seq, join(seq_copy2, "")
end

function insert_blanks(pos::Vector{Int}, original::String)
    spos = sort(pos)
    push!(spos, typemax(Int64))
    l = length(original)
    l2 = length(pos)
    j = 1
    result=""
    
    for i in 1:l
        while i == spos[j]
            j+=1
            result *= '_'
        end
        result *= original[i]
    end
    while j <= l2 && l+1 == spos[j]
        result *= '_'
        j+=1
    end
    return result
end

fs_penalty = 0.5  # 1.4 + 1.2 = 2.6 || 0.5 + 2 * 1.4 = 3.3

ma_penalty = 1
tri_penalty = 2
gap_penalty = 1 
aff_penalty = 0.4
tri_aff = aff_penalty * 3 # affine for tri_penalty (1.2)

function Wunsch(A::String,B::String)
    n, m = (length(A), length(B))
    dp_matrix = zeros(Float64, n+1, m+1)
    bt_matrix = fill((0, 0), n+1, m+1)
    tri_match_matrix = zeros(Float64, 3, m)

    dp_matrix[2, 1] = gap_penalty
    dp_matrix[1, 2] = gap_penalty

    bt_matrix[2, 1] = (1, 1)
    bt_matrix[1, 2] = (1, 1)

    for i in 3:n + 1
        if i < 4
            dp_matrix[i, 1] = dp_matrix[i-1, 1] + aff_penalty + fs_penalty
            bt_matrix[i, 1] = (i-1, 1)
        elseif i == 4
            dp_matrix[i, 1] = tri_penalty
            bt_matrix[i, 1] = (i-3, 1)
        elseif i > 4
            dp_matrix[i, 1] = dp_matrix[i-3, 1] + tri_aff
            bt_matrix[i, 1] = (i-3, 1)

        end
    end
    
    for i in 3:m + 1
        if i < 4
            dp_matrix[1, i] = dp_matrix[1, i-1] + aff_penalty + fs_penalty
            bt_matrix[1, i] = (1, i-1)
        elseif i > 4
            dp_matrix[1, i] = dp_matrix[1, i-3] + tri_aff
            bt_matrix[1, i] = (1, i-3)
        elseif i == 4
            dp_matrix[1, i] = tri_penalty
            bt_matrix[1, i] = (1, i-3)
        end
    end

    for i in 2:n+1
        for j in 2:m+1
            
            # (i+1) % 3 + 1 = 1, 2, 3
            if A[i-1] != B[j-1]
                tri_match_matrix[(i + 1) % 3 + 1, j-1] = ma_penalty
            end

            # nucleotide match/gap
            
            # 3-1 & 1-2 & 2-3

            if A[i-1] == B[j-1] 
                if bt_matrix[i-1, j][2] == j && bt_matrix[i, j-1][1] == i

                    if dp_matrix[i-1, j-1] <= min(
                        dp_matrix[i, j-1] + aff_penalty,
                        dp_matrix[i-1, j] + aff_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1] 
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] < dp_matrix[i, j-1]
                        dp_matrix[i, j] = dp_matrix[i-1, j] + aff_penalty
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + aff_penalty
                        bt_matrix[i, j] = (i, j-1)
                    end
                    
                    # aff for i                    
                elseif bt_matrix[i-1, j][2] == j

                    if dp_matrix[i-1, j-1] <= min(
                        dp_matrix[i, j-1] + gap_penalty,
                        dp_matrix[i-1, j] + aff_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1]
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] + aff_penalty < dp_matrix[i, j-1] + gap_penalty
                        dp_matrix[i, j] = dp_matrix[i-1, j] + aff_penalty
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + gap_penalty  
                        bt_matrix[i, j] = (i, j-1)
                    end

                    # aff for j                    
                elseif bt_matrix[i, j-1][1] == i

                    if dp_matrix[i-1, j-1] <= min(
                        dp_matrix[i, j-1] + aff_penalty,
                        dp_matrix[i-1, j] + gap_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1]
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] + gap_penalty < dp_matrix[i, j-1] + aff_penalty
                        dp_matrix[i, j] = dp_matrix[i-1, j] + gap_penalty  
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + aff_penalty  
                        bt_matrix[i, j] = (i, j-1)
                    end

                    # opening gap for both
                else                
                    if dp_matrix[i-1, j-1] <= min(
                        dp_matrix[i, j-1] + gap_penalty,
                        dp_matrix[i-1, j] + gap_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1]
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] + gap_penalty < dp_matrix[i, j-1] + gap_penalty
                        dp_matrix[i, j] = dp_matrix[i-1, j] + gap_penalty  
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + gap_penalty  
                        bt_matrix[i, j] = (i, j-1)
                    end
                end
            else
                # gap or missalignment

                # check if affine gap should be used

                # don't have to use fs_penalty bc it will be added regardless of the outcome

                if bt_matrix[i-1, j][2] == j && bt_matrix[i, j-1][1] == i

                    if dp_matrix[i - 1, j-1] + ma_penalty <= min(
                        dp_matrix[i, j-1] + aff_penalty,
                        dp_matrix[i-1, j] + aff_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i - 1, j-1] + ma_penalty
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] < dp_matrix[i, j-1]
                        dp_matrix[i, j] = dp_matrix[i-1, j] + aff_penalty
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + aff_penalty
                        bt_matrix[i, j] = (i, j-1)
                    end
                    
                    # aff for i                    
                elseif bt_matrix[i-1, j][2] == j

                    if dp_matrix[i-1, j-1] + ma_penalty <= min(
                        dp_matrix[i, j-1] + gap_penalty,
                        dp_matrix[i-1, j] + aff_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1] + ma_penalty
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] + aff_penalty < dp_matrix[i, j-1] + gap_penalty
                        dp_matrix[i, j] = dp_matrix[i-1, j] + aff_penalty
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + gap_penalty  
                        bt_matrix[i, j] = (i, j-1)
                    end

                    # aff for j                    
                elseif bt_matrix[i, j-1][1] == i

                    if dp_matrix[i-1, j-1] + ma_penalty <= min(
                        dp_matrix[i, j-1] + aff_penalty,
                        dp_matrix[i-1, j] + gap_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1] + ma_penalty
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] + gap_penalty < dp_matrix[i, j-1] + aff_penalty
                        dp_matrix[i, j] = dp_matrix[i-1, j] + gap_penalty  
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + aff_penalty  
                        bt_matrix[i, j] = (i, j-1)
                    end

                    # opening gap for both
                else                
                    if dp_matrix[i-1, j-1] + ma_penalty <= min(
                        dp_matrix[i, j-1] + gap_penalty,
                        dp_matrix[i-1, j] + gap_penalty
                        )
                        dp_matrix[i, j] = dp_matrix[i-1, j-1] + ma_penalty
                        bt_matrix[i, j] = (i-1, j-1)
                    elseif dp_matrix[i-1, j] + gap_penalty < dp_matrix[i, j-1] + gap_penalty
                        dp_matrix[i, j] = dp_matrix[i-1, j] + gap_penalty  
                        bt_matrix[i, j] = (i-1, j)
                    else
                        dp_matrix[i, j] = dp_matrix[i, j-1] + gap_penalty  
                        bt_matrix[i, j] = (i, j-1)
                    end
                end

            end

            dp_matrix[i, j] += fs_penalty

            # codon gap/match

            if i > 3 && j > 3
                diag = tri_match_matrix[1, j-3] + tri_match_matrix[2, j-2] + tri_match_matrix[3, j-1] + dp_matrix[i-3, j-3]
                
                if bt_matrix[i-3, j][2] == j && bt_matrix[i, j-3][1] == i

                    if diag <= min(
                        dp_matrix[i, j-3] + tri_aff,
                        dp_matrix[i-3, j] + tri_aff
                        ) && diag <= dp_matrix[i, j]
                        dp_matrix[i, j] = diag 
                        bt_matrix[i, j] = (i-3, j-3)
                    elseif dp_matrix[i-3, j] < dp_matrix[i, j-3] && dp_matrix[i-3, j] + tri_aff <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i-3, j] + tri_aff
                        bt_matrix[i, j] = (i-3, j)
                    elseif dp_matrix[i, j-3] + tri_aff <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i, j-3] + tri_aff
                        bt_matrix[i, j] = (i, j-3)
                    end
                    
                    # aff for i                    
                elseif bt_matrix[i-3, j][2] == j

                    if diag <= min(
                        dp_matrix[i, j-3] + tri_penalty,
                        dp_matrix[i-3, j] + tri_aff
                        ) && diag <= dp_matrix[i, j]
                        dp_matrix[i, j] = diag
                        bt_matrix[i, j] = (i-3, j-3)
                    elseif dp_matrix[i-3, j] + tri_aff <= dp_matrix[i, j-3] + tri_penalty && dp_matrix[i-3, j] + tri_aff <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i-3, j] + tri_aff
                        bt_matrix[i, j] = (i-3, j)
                    elseif dp_matrix[i, j-3] + tri_penalty <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i, j-3] + tri_penalty  
                        bt_matrix[i, j] = (i, j-3)
                    end

                    # aff for j                    
                elseif bt_matrix[i, j-3][1] == i

                    if diag <= min(
                        dp_matrix[i, j-3] + tri_aff,
                        dp_matrix[i-3, j] + tri_penalty
                        ) && diag <= dp_matrix[i, j]
                        dp_matrix[i, j] = diag
                        bt_matrix[i, j] = (i-3, j-3)
                    elseif dp_matrix[i-3, j] + tri_penalty < dp_matrix[i, j-3] + tri_aff && dp_matrix[i-3, j] + tri_penalty <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i-3, j] + tri_penalty  
                        bt_matrix[i, j] = (i-3, j)
                    elseif dp_matrix[i, j-3] + tri_aff <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i, j-3] + tri_aff  
                        bt_matrix[i, j] = (i, j-3)
                    end

                    # opening gap for both
                else                
                    if diag <= min(
                        dp_matrix[i, j-3] + tri_penalty,
                        dp_matrix[i-3, j] + tri_penalty
                        ) && diag <= dp_matrix[i, j]
                        dp_matrix[i, j] = diag
                        bt_matrix[i, j] = (i-3, j-3)
                    elseif dp_matrix[i-3, j] + tri_penalty < dp_matrix[i, j-3] + tri_penalty && dp_matrix[i-3, j] + tri_penalty <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i-3, j] + tri_penalty  
                        bt_matrix[i, j] = (i-3, j)
                    elseif dp_matrix[i, j-3] + tri_penalty <= dp_matrix[i, j]
                        dp_matrix[i, j] = dp_matrix[i, j-3] + tri_penalty  
                        bt_matrix[i, j] = (i, j-3)
                    end
                end
            elseif i > 3
                if bt_matrix[i-3, j][2] == j && dp_matrix[i-3, j] + tri_aff <= dp_matrix[i, j]
                    dp_matrix[i, j] = dp_matrix[i-3, j] + tri_aff
                    bt_matrix[i, j] = (i-3, j)
                elseif dp_matrix[i-3, j] + tri_penalty <= dp_matrix[i, j]
                    dp_matrix[i, j] = dp_matrix[i-3, j] + tri_penalty
                    bt_matrix[i, j] = (i-3, j)
                end
            elseif j > 3
                if bt_matrix[i, j-3][1] == i && dp_matrix[i, j-3] + tri_aff <= dp_matrix[i, j]
                    dp_matrix[i, j] = dp_matrix[i, j-3] + tri_aff
                    bt_matrix[i, j] = (i, j-3)
                elseif dp_matrix[i, j-3] + tri_penalty <= dp_matrix[i, j]
                    dp_matrix[i, j] = dp_matrix[i, j-3] + tri_penalty
                    bt_matrix[i, j] = (i, j-3)
                end
            end
        end
    end

    row, col = (n + 1, m + 1)
    gap1 = Vector{Int}()
    gap2 = Vector{Int}()

    while row > 1 || col > 1
        if row == 1
            for i in 1:col - bt_matrix[row, col][2]
                push!(gap1, row)
            end
        elseif col == 1
            for i in 1:row - bt_matrix[row, col][1]
                push!(gap2, col)
            end
        elseif bt_matrix[row, col][1] == row
            for i in 1:col - bt_matrix[row, col][2]
                push!(gap1, row)
            end
        elseif bt_matrix[row, col][2] == col
            for i in 1:row - bt_matrix[row, col][1]
                push!(gap2, col)
            end
        end
        row, col = bt_matrix[row, col]
    end

    # show(stdout, "text/plain", dp_matrix)
    # println()

    return insert_blanks(gap1, A), insert_blanks(gap2, B)
end

A, B = generate_seq(16)

# println(A, "\n", B, "\n")

A2, B2 = Wunsch(A, B)

println(A2, "\n", B2)